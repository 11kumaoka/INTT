//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id$
//
/// \file EDRunAction.cc
/// \brief Implementation of the EDRunAction class

#include "EDRunAction.hh"

G4double EDRunAction::beam_energy;
EDRunAction::EDRunAction(EDPrimaryGeneratorAction* pga )
: G4UserRunAction()
{

  DefineCommands();
  
  // Create analysis manager
  // The choice of analysis technology is done via selectin of a namespace
  // in B4Analysis.hh
  G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();
  analysisManager->SetVerboseLevel(1);
  analysisManager->SetNtupleMerging(true);
  G4cout << "Using " << analysisManager->GetType() 
         << " analysis manager" << G4endl;

  // Creating histograms per layer
  //
  /*for ( G4int i=0; i<10; ++i) {
    std::ostringstream os;
    os << i;
    G4String hname = "Layer";
    hname += os.str();
    G4String htitle = "Edep [MeV] in layer ";
    htitle += os.str();
    htitle += " in EmCalorimeter"; 
    analysisManager->CreateH1(hname, htitle, 100, 0., 800);
  } */ 

  // Creating histograms for summary data
  // histogram 10 
  /*analysisManager->CreateH1("AllCharged", "Charged Edep [MeV] in all layers" , 
                            150, 0., 1500);
  // histogram 11 
  analysisManager->CreateH1("AllNeutral", "Neutral Edep [MeV] in all layers" , 
                            100, 0., 100);
  // histogram 12 
  analysisManager->CreateH1("EdepPrimary", "Edep [MeV] by primary in calorimeter" , 
                            150, 0., 1500);
  // histogram 13 
  analysisManager->CreateH1("EdepOthers", "Edep [MeV] by non-primary in calorimeter" , 
                            150, 0., 1500);*/

  // Creating ntuples
  // ntuple id = 0
  //============================the original one store the center of strip====================================================       
  // analysisManager->CreateNtuple( "Chamber1", "Chamber 1 hits");
  // analysisManager->CreateNtupleIColumn( "Event_ID" );
  // analysisManager->CreateNtupleIColumn( "UpandDown" );   // column id = 0 
  // analysisManager->CreateNtupleDColumn( "Xpos" );    // column id = 1 
  // analysisManager->CreateNtupleDColumn( "Ypos" );    // column id = 2
  // analysisManager->CreateNtupleDColumn( "Zpos" );    // column id = 3 
  // analysisManager->CreateNtupleIColumn( "silicon_type" );    // column id = 3   
  // analysisManager->CreateNtupleDColumn( "Edep" );    // column id = 3 
  // analysisManager->FinishNtuple( );
  //============================the original one store the center of strip====================================================       

  //============================NEW one, only store the ID====================================================        
  analysisManager->CreateNtuple( "Chamber1", "Chamber 1 hits" );
  analysisManager->CreateNtupleIColumn( "Event_ID" );
  analysisManager->CreateNtupleIColumn( "UpandDown" );   // column id = 0 
  analysisManager->CreateNtupleIColumn( "Xpos" );    // column id = 1 
  analysisManager->CreateNtupleIColumn( "Ypos" );    // column id = 2
  analysisManager->CreateNtupleIColumn( "Zpos" );    // column id = 3 
  analysisManager->CreateNtupleIColumn( "silicon_type" );    // column id = 3   
  analysisManager->CreateNtupleDColumn( "Edep" );    // column id = 3 
  analysisManager->FinishNtuple();
  //============================NEW one, only store the ID====================================================

  //ntuple id =1 
  analysisManager->CreateNtuple( "Beam_angle", "Beam_angle" );
  analysisManager->CreateNtupleDColumn( "Beam_X" ); // colume id = 0
  analysisManager->CreateNtupleDColumn( "Beam_Y" ); // colume id = 0
  analysisManager->CreateNtupleDColumn( "Beam_Z" ); // colume id = 0 
  analysisManager->CreateNtupleDColumn( "Beam_Theta" ); // colume id = 0
  analysisManager->CreateNtupleDColumn( "Beam_Phi" ); // colume id = 1
  analysisManager->CreateNtupleIColumn( "Event_ID" ); // colume id = 1
  analysisManager->CreateNtupleDColumn( "Beam_energy" );
  analysisManager->FinishNtuple();

  analysisManager->CreateNtuple( "event_particle", "event_particle" );
  analysisManager->CreateNtupleIColumn( "PID_order" ); // colume id = 0
  analysisManager->CreateNtupleIColumn( "PID" ); // colume id = 0
  analysisManager->CreateNtupleDColumn( "PID_energy" );
  analysisManager->CreateNtupleDColumn( "particle_X" ); // colume id = 0
  analysisManager->CreateNtupleDColumn( "particle_Y" );
  analysisManager->CreateNtupleDColumn( "particle_Z" );
  analysisManager->CreateNtupleIColumn( "volume_type" );
  analysisManager->CreateNtupleIColumn( "Event_ID" ); // colume id = 1
  analysisManager->FinishNtuple();

  // === information of the trigger scintillators ========================================== //
  analysisManager->CreateNtuple( "sci_trigger", "sci_trigger" );
  analysisManager->CreateNtupleIColumn( "Event_ID" );
  analysisManager->CreateNtupleIColumn( "sci_ID" );
  analysisManager->CreateNtupleDColumn( "sci_edep" ); // colume id = 0
  analysisManager->FinishNtuple();    

  // === the same format as the testbench DAQ =============================================== //
  analysisManager->CreateNtuple( "tree", "testbench_tree" );  
  analysisManager->CreateNtupleIColumn( "adc" );
  analysisManager->CreateNtupleIColumn( "ampl" );      
  analysisManager->CreateNtupleIColumn( "chip_id" );
  analysisManager->CreateNtupleIColumn( "fpga_id" );
  analysisManager->CreateNtupleIColumn( "module" );
  analysisManager->CreateNtupleIColumn( "chan_id" );   
  analysisManager->CreateNtupleIColumn( "fem_id" );    
  analysisManager->CreateNtupleIColumn( "bco" );       
  analysisManager->CreateNtupleIColumn( "bco_full" );  
  analysisManager->CreateNtupleIColumn( "event" );     
  analysisManager->FinishNtuple();    
  

}

EDRunAction::~EDRunAction()
{
  delete G4AnalysisManager::Instance();  
}

void EDRunAction::DefineCommands()
{
  fMessenger
    = new G4GenericMessenger(this, "/intt/run/", "Commands for run in this application");

  //////////////////////////////////////////////////////////////////////////////
  // Tag for the output file to indentify or something
  G4GenericMessenger::Command& setTag
    = fMessenger->DeclareProperty( "tag", this->tag );
  setTag.SetGuidance( "Tag for the output file." );
  setTag.SetParameterName( "tag", false ); // (name, is_omittable)
  setTag.SetDefaultValue( "" );

  //////////////////////////////////////////////////////////////////////////////
  // Path to a directory for the output file
  G4GenericMessenger::Command& setDir
    = fMessenger->DeclareProperty( "dir", output_dir );
  setDir.SetGuidance( "A path to a direcory to be output" );
  setDir.SetParameterName( "dir", true ); // (name, is_omittable)
  setDir.SetDefaultValue( "" );

  //////////////////////////////////////////////////////////////////////////////
  // Beam energy
  // G4GenericMessenger::Command& setBeamEnergy
  //   = fMessenger->DeclarePropertyWithUnit( "beamEnergy", "GeV", beam_energy );
  // setBeamEnergy.SetGuidance( "Beam energy in the units of GeV" );
  // setBeamEnergy.SetParameterName( "BeamEnergy", false ); // (name, is_omittable)
  // setBeamEnergy.SetDefaultValue( 1.0 );

}

void EDRunAction::BeginOfRunAction(const G4Run* /*run*/)
{
  auto UImanager = G4UImanager::GetUIpointer();

  if( isFirst ){
    //    this->beam_energy =  UImanager->GetCurrentDoubleValue( "/gun/energy" ) * MeV; // MeV is used
    this->beam_energy =  UImanager->GetCurrentDoubleValue( "/gun/energy" ) * GeV; // GeV is used in any cases...
    G4String energy_unit =  UImanager->GetCurrentStringValue( "/gun/energy", 2 ) ;
    // UImanager->ApplyCommand( "/gun/energy 7 MeV" );
    // std::cout << "UI manager, /gun/energy: "
    // 	      << UImanager->GetCurrentStringValue( "/gun/energy" , 1 ) << " "
    // 	      << UImanager->GetCurrentStringValue( "/gun/energy" , 2 ) << " "
    // 	      << std::endl;
    std::cerr << beam_energy << "\t" << beam_energy / MeV << "\tunit: " << energy_unit << std::endl;

    this->tag =  UImanager->GetCurrentDoubleValue( "/intt/run/tag" );
    std::cerr << "tag: " << this->tag << std::endl;
    isFirst = false;
  }

  G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();

  // define output name
  G4String particle = UImanager->GetCurrentStringValue( "/gun/particle" );
  std::stringstream ss;
  //  ss << std::fixed << std::setprecision(2) << beam_energy;
  ss << this->beam_energy * MeV;
  G4String energy   = ss.str() + "MeV";
  //  G4String event_num = UImanager->GetCurrentStringValue( "/gun/beamOn") + "events";

  // Open an output file
  G4String fileName = "INTT_ELPH_" + particle + "_" + energy;// + "_" + event_num;
  // if( pga->IsMomentumSpread() )
  //   fileName += "_EbeamFracON";
  // else
  //   fileName += "_EbeamFracOFF";

  if( tag != "" )
    fileName += "_" + tag;
  
  // In the case of precision of the beam energy is better than 1 GeV, for example 1.1 GeV,
  // a suffix ".root" should be added
  if( fileName.contains( ".root" ) == false )
    fileName += ".root";

  if( output_dir != "" )
    fileName = output_dir + "/" + fileName;

  std::cerr << "Output file: " << fileName << std::endl;
  analysisManager->OpenFile(fileName);
}

void EDRunAction::EndOfRunAction(const G4Run* /*run*/)
{  
  // save histograms 
  G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();
  analysisManager->Write();
  analysisManager->CloseFile();
}
