//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id$
//
/// \file EDPrimaryGeneratorAction.cc
/// \brief Implementation of the EDPrimaryGeneratorAction class

#include "EDPrimaryGeneratorAction.hh"

EDPrimaryGeneratorAction::EDPrimaryGeneratorAction()
: G4VUserPrimaryGeneratorAction(),
  fMessenger(0),
  fParticleGun(0),
  fRandom(true)
{   
  G4int nofParticles = 1;
  fParticleGun  = new G4ParticleGun(nofParticles);

  // Define particle properties  
  G4ParticleDefinition* particle
    = G4ParticleTable::GetParticleTable()->FindParticle( "e+" );
  fParticleGun->SetParticleDefinition(particle);

  // Default particle kinematics
  //G4ThreeVector position(0*mm, 0*mm, -20167.*mm);   
  //G4ThreeVector momentum(0, 0, 120.*GeV);
  //fParticleGun->SetParticleMomentum(momentum);
  //fParticleGun->SetParticlePosition(position);
    
  // Generic messenger
  // Define /B4/event commands using generic messenger class
  fMessenger 
    = new G4GenericMessenger(this, "/ED/primary/", "Primary generator control");

  // Define /B4/event/setPrintModulo command
  fMessenger
    ->DeclareProperty("setRandom", fRandom, "Activate/Inactivate random option");
  
}

EDPrimaryGeneratorAction::~EDPrimaryGeneratorAction()
{}


void EDPrimaryGeneratorAction::GeneratePrimaries(G4Event* event)
{
  //this function is called at the begining of ecah event
  G4int eID = event->GetEventID();

  //G4cout<<"1111111111 "<<eID<<G4endl;

  G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();
  G4int fNtupleId = 1;
  if ( 1==1 ) {

    // randomized direction
    G4double dtheta = 2.*deg;
    G4double dphi = 360*deg;
    G4double pi = 3.1415926535897;
    // G4double theta = G4UniformRand()*dtheta;
    // G4double phi = G4UniformRand()*dphi;
    //G4double theta = (1.62- THETAANGLE *0.00025)*deg;

    //G4double thetagaus=G4MTRandGauss::shoot(0,0.002);
    G4double thetagaus = CLHEP::RandGauss::shoot( 0.0, 0.002 );
    
    //G4double phigaus=G4MTRandGauss::shoot(90,0.002);
    G4double phigaus = G4UniformRand() * 360;
    //G4double X_position=G4MTRandGauss::shoot(0,0.0559)*mm;
    G4double X_position = 0.0 * mm;
    //    G4double Y_position=G4MTRandGauss::shoot(0,0.1182)*mm;
    G4double Y_position = 0.0 * mm;
    
    //G4double energy_spectrum=G4MTRandGauss::shoot(120,2.4);
    //G4double energy_spectrum = 120.0;
    //G4double energy_spectrum = 0.8;
    //G4double energy_spectrum = 0.2;
    G4double energy_spectrum = EDRunAction::beam_energy;

    G4double theta = thetagaus * deg;
    G4double phi = phigaus * deg;
    //G4double theta = (126*0.01)*deg;
    //G4double phi = 90.*deg;
    
    //=========================================the original one 2021/8/12===========================================

    // fParticleGun->SetParticleMomentumDirection(
    //   G4ThreeVector(sin(theta)*cos(phi), sin(theta)*sin(phi), cos(theta)));
    // //fParticleGun->SetParticlePosition(G4ThreeVector(0,0,-20167.*mm));
    // fParticleGun->SetParticlePosition(G4ThreeVector(X_position,Y_position,-20167.*mm));
    // fParticleGun->SetParticleEnergy(energy_spectrum*GeV);

    //==========================================the origianl one 2021/8/12==========================================

    fParticleGun->SetParticleMomentumDirection( G4ThreeVector(0,0,1) );
    //fParticleGun->SetParticlePosition(G4ThreeVector(0,0,-20167.*mm));
    fParticleGun->SetParticlePosition( G4ThreeVector(X_position, Y_position, -200.*mm) );
    fParticleGun->SetParticleEnergy( energy_spectrum * GeV );

    //=================for testing==========================================  
    // fParticleGun->SetParticleMomentumDirection(
    //   G4ThreeVector(0,0,1));
    // //fParticleGun->SetParticlePosition(G4ThreeVector(0,0,-20167.*mm));
    // fParticleGun->SetParticlePosition(G4ThreeVector(0*mm,7.*mm,-300.*mm));
    // fParticleGun->SetParticleEnergy(20*GeV);

    //=================for testing==========================================  

    //G4cout<<" llllllllllll1 "<<fParticleGun->GetParticleMomentumDirection()<<G4endl;
    //G4cout<<thetagaus<<" "<<X_position<<" "<<Y_position<<" "<<"???????"<<G4endl;

    analysisManager->FillNtupleDColumn(fNtupleId, 0, sin(theta)*cos(phi));
    analysisManager->FillNtupleDColumn(fNtupleId, 1, sin(theta)*sin(phi));
    analysisManager->FillNtupleDColumn(fNtupleId, 2, cos(theta));
    analysisManager->FillNtupleDColumn(fNtupleId, 3, theta/pi*180.);
    //analysisManager->FillNtupleDColumn(fNtupleId, 3, thetagaus);
    analysisManager->FillNtupleDColumn(fNtupleId, 4, phi/pi*180.);
    analysisManager->FillNtupleIColumn(fNtupleId, 5, eID);
    analysisManager->FillNtupleDColumn(fNtupleId, 6, energy_spectrum);
    analysisManager->AddNtupleRow(fNtupleId);

    if ( eID % 10000 == 0)
      {
        G4cout << "!!!Event Process: " << eID << G4endl;
        G4cout << "!!!particle gun direction "
	       << fParticleGun->GetParticleMomentumDirection() << G4endl;
        G4cout << "!!!theta : " << theta/pi*180. << " phi : " << phi/pi*180. << G4endl;
        G4cout << "!!!particle gun position "
	       << fParticleGun->GetParticlePosition() << G4endl;
        G4cout << "!!!particle gun energy : " << fParticleGun->GetParticleEnergy() << G4endl;     
      }

  }
  else { // never comes, what for?
    fParticleGun->SetParticleMomentumDirection(G4ThreeVector(0, 0, 1));
    //G4cout << " llllllllllll2 " << fParticleGun->GetParticleMomentumDirection() << G4endl;
  }  

  fParticleGun->GeneratePrimaryVertex( event );

  if ( eID % 10000 == 0)
    {
      G4cout << "!!!direciton cross check "
	     << fParticleGun->GetParticleMomentumDirection() << G4endl;
    }
}
